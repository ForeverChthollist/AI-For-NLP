
BEIJING, CHANGCHUN, MULUMUQI, WUHAN, GUNAGHZOU, SHENZHEN, BANGKOK, SHANGHAI, NEWYORK = """
BEIJING CHANGCHUN MULUMUQI WUHAN GUANGZHOU SHENZHEN BANGKOK SHANGHAI NEWYORK
""".split()

connection = {
    CHANGCHUN: [BEIJING],
    MULUMUQI: [BEIJING], 
    BEIJING: [MULUMUQI, CHANGCHUN, WUHAN, SHENZHEN, NEWYORK],
    NEWYORK: [BEIJING, SHANGHAI],
    SHANGHAI: [NEWYORK, WUHAN],
    WUHAN: [SHANGHAI, BEIJING, GUNAGHZOU],
    GUNAGHZOU: [WUHAN, BANGKOK],
    SHENZHEN: [WUHAN, BANGKOK],
    BANGKOK: [SHENZHEN, GUNAGHZOU]
}

def nagivator(start, destination,connection):#不去重复
    paths = [start,]
    path = []
    while paths:
        
        frontier = paths.pop()
        path.append(frontier)
        print('l am standing at : {}'.format(frontier))
        successors = connection[frontier]
    
        for s in successors:
            #print('\t\tl am looking forward  : {}'.format(s))
            #print('\t\tl am looking forward  : {}'.format(successors))
            if s == destination:
                path.append(s)
                return path
        
        paths += successors
        print('\tl am looking forward  : {}'.format(paths))        

def nagivator1(start, destination,connection):#去掉重复
    paths = [start,]
    path = []
    seen = set()
    while paths:
        
        frontier = paths.pop()
        path.append(frontier)
        if frontier in seen: continue
        print('l am standing at : {}'.format(frontier))
        successors = connection[frontier]
        
            
        for s in successors:
            #print('\t\tl am looking forward  : {}'.format(s))
            print('\t\tl am looking forward  : {}'.format(successors))
            if s == destination:
                return path
        
        paths += successors
        print('\tl am looking forward  : {}'.format(paths))        
        seen.add(frontier)
        
        

def nagivator3(start, destination,connection):#最短路径
    paths = [[start] ]
    
    seen = set()
    while paths:
        path = paths.pop(0)
        frontier = path[-1]
        if frontier in seen: continue
        #print('l am standing at : {}'.format(frontier))
        successors = connection[frontier]
        
            
        for s in successors:
            #print('\t\tl am looking forward  : {}'.format(s))
            #print('\t\tl am looking forward  : {}'.format(successors))
            if s == destination:
                path.append(s)
                return path
            else:
                paths.append(path+[s])
                
            paths = sorted(paths,key = len)    
                
#         print(paths)
#         print('\n')
       
        #print('\tl am looking forward  : {}'.format(paths))        
        seen.add(frontier)

def nagivator_bfs(start, destination, connection_graph):
    pathes = [start ]
    seen = set()
    
    while pathes:
        froniter = pathes.pop(0)
        
        if froniter in seen: continue
            
        successors = connection_graph[froniter]
        print('standing on {} Looking forward {}'.format(froniter, successors))
        pathes = pathes + successors
                
        seen.add(froniter)
        
        
def nagivator_dfs(start, destination, connection_graph):
    pathes = [start ]
    seen = set()
    
    while pathes:
        froniter = pathes.pop(0)
        
        if froniter in seen: continue
            
        successors = connection_graph[froniter]
        print('standing on {} Looking forward {}'.format(froniter, successors))
        pathes =  successors + pathes 
                
        seen.add(froniter)
        
        
nagivator_dfs(0,7,connection_2)
print('\n\n')
nagivator_bfs(0,7,connection_2)       

